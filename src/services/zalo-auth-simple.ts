import {
  getUserInfo,
  getPhoneNumber,
  login as zmpLogin,
  authorize,
  getSetting,
  getUserID,
} from "zmp-sdk/apis";

import { ZaloUser } from "../types/auth";

const STORAGE_KEYS = {
  USER_DATA: "zalo_user_data",
  LOGIN_STATUS: "zalo_login_status",
};

// L∆∞u th√¥ng tin user v√†o localStorage
export function saveUserToStorage(user: ZaloUser): void {
  try {
    localStorage.setItem(STORAGE_KEYS.USER_DATA, JSON.stringify(user));
    localStorage.setItem(STORAGE_KEYS.LOGIN_STATUS, "true");
    console.log("üíæ User saved to localStorage:", user);
  } catch (error) {
    console.error("Failed to save user to storage:", error);
  }
}

// L·∫•y th√¥ng tin user t·ª´ localStorage
export function getUserFromStorage(): ZaloUser | null {
  try {
    const userData = localStorage.getItem(STORAGE_KEYS.USER_DATA);
    const user = userData ? JSON.parse(userData) : null;
    console.log("üìñ User loaded from localStorage:", user);
    return user;
  } catch (error) {
    console.error("Failed to get user from storage:", error);
    return null;
  }
}

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
export function isLoggedIn(): boolean {
  try {
    const status = localStorage.getItem(STORAGE_KEYS.LOGIN_STATUS) === "true";
    console.log("üîç Login status checked:", status);
    return status;
  } catch {
    return false;
  }
}

// X√≥a th√¥ng tin user kh·ªèi localStorage
export function clearUserFromStorage(): void {
  try {
    localStorage.removeItem(STORAGE_KEYS.USER_DATA);
    localStorage.removeItem(STORAGE_KEYS.LOGIN_STATUS);
    console.log("üóëÔ∏è User data cleared from localStorage");
  } catch (error) {
    console.error("Failed to clear user from storage:", error);
  }
}

// L·∫•y User ID t·ª´ Zalo SDK
export async function getZaloUserId(): Promise<string> {
  try {
    const raw = (await getUserID()) as
      | string
      | { id?: string }
      | { userID?: string };
    const uid =
      typeof raw === "string"
        ? raw
        : (raw as any).id || (raw as any).userID || "";

    if (!uid) {
      throw new Error("Failed to get Zalo User ID");
    }

    console.log("üÜî Zalo User ID:", uid);
    return uid;
  } catch (error) {
    console.error("Error getting Zalo User ID:", error);
    throw error;
  }
}

// Ki·ªÉm tra v√† xin quy·ªÅn
export async function checkAndRequestPermissions(
  scopes: string[]
): Promise<boolean> {
  try {
    const { authSetting } = await getSetting();

    // Ki·ªÉm tra xem ƒë√£ c√≥ quy·ªÅn ch∆∞a
    const hasAllPermissions = scopes.every((scope) => !!authSetting?.[scope]);

    if (!hasAllPermissions) {
      console.log("üîê Requesting permissions:", scopes);
      // Xin quy·ªÅn
      await authorize({ scopes });
      console.log("‚úÖ Permissions granted");
      return true;
    }

    console.log("‚úÖ Permissions already granted");
    return true;
  } catch (error) {
    console.error("Error checking/requesting permissions:", error);
    return false;
  }
}

// L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa user
export async function getUserBasicInfo(): Promise<Partial<ZaloUser>> {
  try {
    console.log("üîê Requesting userInfo permission...");
    
    // Xin quy·ªÅn userInfo tr∆∞·ªõc
    await authorize({ 
      scopes: ["scope.userInfo"] 
    });
    
    console.log("‚úÖ UserInfo permission granted, getting user info...");

    const { userInfo } = await getUserInfo({
      autoRequestPermission: false, // ƒê√£ xin quy·ªÅn r·ªìi
      avatarType: "normal",
    });

    const basicInfo = {
      id: userInfo.id,
      name: userInfo.name || "",
      avatar: userInfo.avatar || "",
    };

    console.log("üë§ Basic user info:", basicInfo);
    return basicInfo;
  } catch (error: any) {
    console.error("Error getting user basic info:", error);

    // N·∫øu user t·ª´ ch·ªëi c·∫•p quy·ªÅn (-1401), v·∫´n tr·∫£ v·ªÅ ID
    if (error.code === -1401) {
      console.log("‚ö†Ô∏è User denied userInfo permission, using fallback");
      const userId = await getZaloUserId();
      const fallbackInfo = {
        id: userId,
        name: "",
        avatar: "",
      };
      console.log("‚ö†Ô∏è Using fallback user info:", fallbackInfo);
      return fallbackInfo;
    }

    throw error;
  }
}

// L·∫•y s·ªë ƒëi·ªán tho·∫°i
export async function getUserPhoneNumber(): Promise<string | undefined> {
  try {
    console.log("üîê Requesting phone number permission...");
    
    // Xin quy·ªÅn s·ªë ƒëi·ªán tho·∫°i
    await authorize({ 
      scopes: ["scope.userPhonenumber"] 
    });
    
    console.log("‚úÖ Phone permission granted, getting phone token...");

    const { token } = await getPhoneNumber();
    console.log("üìû Phone token received:", token);

    // L∆∞u √Ω: Token n√†y c·∫ßn ƒë∆∞·ª£c g·ª≠i l√™n server ƒë·ªÉ decode th√†nh s·ªë ƒëi·ªán tho·∫°i th·ª±c
    // Hi·ªán t·∫°i ch√∫ng ta s·∫Ω gi·∫£ l·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ demo
    // Trong th·ª±c t·∫ø, b·∫°n c·∫ßn:
    // 1. G·ª≠i token n√†y l√™n server c·ªßa b·∫°n
    // 2. Server g·ªçi Zalo Open API ƒë·ªÉ decode token
    // 3. Tr·∫£ v·ªÅ s·ªë ƒëi·ªán tho·∫°i th·ª±c
    
    console.log("‚ö†Ô∏è Phone token needs server-side processing");
    console.log("üìù For demo, using mock phone number");
    
    // Gi·∫£ l·∫≠p s·ªë ƒëi·ªán tho·∫°i cho demo
    const mockPhone = "0912345678";
    console.log("üìû Mock phone number:", mockPhone);
    return mockPhone;
    
  } catch (error: any) {
    console.error("Error getting phone number:", error);

    // N·∫øu user t·ª´ ch·ªëi c·∫•p quy·ªÅn, tr·∫£ v·ªÅ undefined
    if (error.code === -1401 || error.code === -201) {
      console.log("‚ö†Ô∏è Phone number permission denied");
      return undefined;
    }

    throw error;
  }
}

// ƒêƒÉng nh·∫≠p ch√≠nh
export async function login(): Promise<ZaloUser> {
  try {
    console.log("üöÄ Starting Zalo login process...");

    // 1. L·∫•y User ID
    const userId = await getZaloUserId();
    console.log("‚úÖ Got User ID:", userId);

    // 2. L·∫•y th√¥ng tin c∆° b·∫£n
    const basicInfo = await getUserBasicInfo();
    console.log("‚úÖ Got basic info:", basicInfo);

    // 3. Th·ª≠ l·∫•y s·ªë ƒëi·ªán tho·∫°i (kh√¥ng b·∫Øt bu·ªôc)
    let phone: string | undefined;
    try {
      phone = await getUserPhoneNumber();
      console.log("‚úÖ Got phone number:", phone);
    } catch (error) {
      console.log("‚ö†Ô∏è Could not get phone number:", error);
    }

    // 4. T·∫°o user object
    const user: ZaloUser = {
      id: userId,
      name: basicInfo.name,
      avatar: basicInfo.avatar,
      phone: phone,
      lastLogin: new Date().toISOString(),
    };

    // 5. L∆∞u v√†o localStorage
    saveUserToStorage(user);
    console.log("‚úÖ User saved to storage:", user);

    return user;
  } catch (error) {
    console.error("‚ùå Login failed:", error);
    throw error;
  }
}

// ƒêƒÉng xu·∫•t
export function logout(): void {
  try {
    clearUserFromStorage();
    console.log("‚úÖ User logged out successfully");
  } catch (error) {
    console.error("‚ùå Logout failed:", error);
  }
}

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
export function getCurrentUser(): ZaloUser | null {
  return getUserFromStorage();
}

// C·∫≠p nh·∫≠t th√¥ng tin user
export function updateUserInfo(updates: Partial<ZaloUser>): ZaloUser | null {
  try {
    const currentUser = getUserFromStorage();
    if (!currentUser) {
      console.warn("No user found to update");
      return null;
    }

    const updatedUser: ZaloUser = {
      ...currentUser,
      ...updates,
      lastLogin: new Date().toISOString(),
    };

    saveUserToStorage(updatedUser);
    console.log("‚úÖ User info updated:", updatedUser);

    return updatedUser;
  } catch (error) {
    console.error("‚ùå Failed to update user info:", error);
    return null;
  }
}
