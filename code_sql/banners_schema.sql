begin;
-- Schema guard
create schema if not exists public;
-- Banners/Content table (minimal fields)
create table if not exists public.banners (
    id bigint generated by default as identity primary key,
    image text not null,
    -- URL ảnh
    title text,
    -- tiêu đề ngắn
    subtitle text,
    -- mô tả ngắn
    link_type text default 'none',
    -- 'external' | 'product' | 'category' | 'search' | 'none'
    link_target text,
    -- URL/id/keyword tùy theo link_type
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);
-- updated_at trigger (idempotent)
create or replace function public.set_updated_at() returns trigger language plpgsql as $$ begin new.updated_at = now();
return new;
end;
$$;
drop trigger if exists trg_banners_updated_at on public.banners;
create trigger trg_banners_updated_at before
update on public.banners for each row execute procedure public.set_updated_at();
-- RLS: deny direct access from client
alter table public.banners enable row level security;
do $$ begin execute 'revoke all on table public.banners from public, anon, authenticated';
exception
when others then null;
end $$;
do $$ begin execute 'grant select, insert, update, delete on table public.banners to service_role';
exception
when others then null;
end $$;
drop policy if exists "deny_all_select_banners" on public.banners;
drop policy if exists "deny_all_modify_banners" on public.banners;
create policy "deny_all_select_banners" on public.banners for
select using (false);
create policy "deny_all_modify_banners" on public.banners for all using (false) with check (false);
-- RPC: list and upsert
-- List all banners ordered by id asc
create or replace function public.rpc_list_banners() returns setof public.banners language sql stable security definer
set search_path = public as $$
select *
from public.banners
order by id asc;
$$;
-- Upsert banner (place non-default params first)
create or replace function public.rpc_upsert_banner(
        p_image text,
        p_title text default null,
        p_subtitle text default null,
        p_link_type text default 'none',
        p_link_target text default null,
        p_id bigint default null
    ) returns public.banners language plpgsql security definer
set search_path = public as $$
declare v public.banners;
begin if p_id is null then
insert into public.banners(image, title, subtitle, link_type, link_target)
values (
        p_image,
        nullif(p_title, ''),
        nullif(p_subtitle, ''),
        coalesce(nullif(p_link_type, ''), 'none'),
        nullif(p_link_target, '')
    )
returning * into v;
else
update public.banners
set image = coalesce(nullif(p_image, ''), image),
    title = coalesce(nullif(p_title, ''), title),
    subtitle = coalesce(nullif(p_subtitle, ''), subtitle),
    link_type = coalesce(nullif(p_link_type, ''), link_type),
    link_target = coalesce(nullif(p_link_target, ''), link_target),
    updated_at = now()
where id = p_id
returning * into v;
end if;
return v;
end;
$$;
-- Grant RPC to anon (client)
do $$ begin execute 'revoke all on function public.rpc_list_banners() from public';
execute 'revoke all on function public.rpc_upsert_banner(text, text, text, text, text, bigint) from public';
exception
when others then null;
end $$;
do $$ begin execute 'grant execute on function public.rpc_list_banners() to anon';
execute 'grant execute on function public.rpc_upsert_banner(text, text, text, text, text, bigint) to anon';
exception
when others then null;
end $$;
commit;