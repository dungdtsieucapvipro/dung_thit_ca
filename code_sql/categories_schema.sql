begin;
-- Schema guard
create schema if not exists public;
-- Categories table
create table if not exists public.categories (
    id bigint generated by default as identity primary key,
    name text not null,
    image text,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);
-- updated_at trigger (idempotent)
create or replace function public.set_updated_at() returns trigger language plpgsql as $$ begin new.updated_at = now();
return new;
end;
$$;
drop trigger if exists trg_categories_updated_at on public.categories;
create trigger trg_categories_updated_at before
update on public.categories for each row execute procedure public.set_updated_at();
-- RLS: deny direct access
alter table public.categories enable row level security;
do $$ begin execute 'revoke all on table public.categories from public, anon, authenticated';
exception
when others then null;
end $$;
do $$ begin execute 'grant select, insert, update, delete on table public.categories to service_role';
exception
when others then null;
end $$;
drop policy if exists "deny_all_select_categories" on public.categories;
drop policy if exists "deny_all_modify_categories" on public.categories;
create policy "deny_all_select_categories" on public.categories for
select using (false);
create policy "deny_all_modify_categories" on public.categories for all using (false) with check (false);
-- RPC
create or replace function public.rpc_list_categories() returns setof public.categories language sql security definer
set search_path = public stable as $$
select *
from public.categories
order by id asc;
$$;
create or replace function public.rpc_upsert_category(
        p_name text,
        p_image text default null,
        p_id bigint default null
    ) returns public.categories language plpgsql security definer
set search_path = public as $$
declare v public.categories;
begin if p_id is null then
insert into public.categories(name, image)
values (p_name, nullif(p_image, ''))
returning * into v;
else
update public.categories
set name = coalesce(nullif(p_name, ''), name),
    image = coalesce(nullif(p_image, ''), image),
    updated_at = now()
where id = p_id
returning * into v;
end if;
return v;
end;
$$;
-- Grant RPC to anon
do $$ begin execute 'revoke all on function public.rpc_list_categories() from public';
execute 'revoke all on function public.rpc_upsert_category(text, text, bigint) from public';
exception
when others then null;
end $$;
do $$ begin execute 'grant execute on function public.rpc_list_categories() to anon';
execute 'grant execute on function public.rpc_upsert_category(text, text, bigint) to anon';
exception
when others then null;
end $$;
commit;